// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (gen_random_uuid(),
        NOW(),
        NOW(),
        $1,
        $2)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          sql.NullString
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :execrows

DELETE
FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAllUsers)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserDetailsByEmail = `-- name: GetUserDetailsByEmail :one

SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE users.email = $1
`

func (q *Queries) GetUserDetailsByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserDetailsByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserDetailsById = `-- name: GetUserDetailsById :one

SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE users.id = $1
`

func (q *Queries) GetUserDetailsById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserDetailsById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserEmailAndPassword = `-- name: UpdateUserEmailAndPassword :one
UPDATE users
SET email    = $1,
    hashed_password = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserEmailAndPasswordParams struct {
	Email          sql.NullString
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserEmailAndPassword(ctx context.Context, arg UpdateUserEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPassword, arg.Email, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeToRed = `-- name: UpgradeToRed :execrows
UPDATE users
SET is_chirpy_red = TRUE
WHERE id = $1
`

func (q *Queries) UpgradeToRed(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, upgradeToRed, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
